// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.App = (function(superClass) {
    extend(App, superClass);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function(deckparam) {
      var deck;
      this.set('deck', deck = deckparam != null ? deckparam : new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      return this.get('playerHand').on('stand', (function(_this) {
        return function() {
          _this.get('dealerHand').dealerPlay();
          return _this.findWinner();
        };
      })(this));
    };

    App.prototype.findWinner = function() {
      var dealerScore, dealerScores, playerScore, playerScores;
      dealerScores = this.get('dealerHand').scores();
      dealerScore = dealerScores[1] <= 21 ? dealerScores[1] : dealerScores[0];
      playerScores = this.get('playerHand').scores();
      playerScore = playerScores[1] <= 21 ? playerScores[1] : playerScores[0];
      if (playerScore > dealerScore) {
        alert('You Win!');
      }
      if (dealerScore > playerScore && dealerScore <= 21) {
        alert('You Lose!');
      }
      if (dealerScore === playerScore) {
        alert('Tie!');
      }
      return this.trigger('game-over');
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.js.map
